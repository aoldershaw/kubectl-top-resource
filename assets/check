#!/bin/bash

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

payload=/tmp/request
cat > $payload <&0

out=/tmp/out

CA_PATH=/tmp/ca.crt

username=$(jq -r '.source.username // ""' < $payload)
password=$(jq -r '.source.password // ""' < $payload)
server=$(jq -r '.source.server // ""' < $payload)
jq -r '.source.ca // ""' < $payload > $CA_PATH
namespace=$(jq -r '.source.namespace // ""' < $payload)
labels=$(jq -r '.source.labels // ""' < $payload)
container_name=$(jq -r '.source.container_name // ""' < $payload)
mem_threshold_mb=$(jq -r '.source.mem_threshold_mb // ""' < $payload)
cpu_threshold_m=$(jq -r '.source.cpu_threshold_m // ""' < $payload)
time_between_s=$(jq -r '.source.time_between_s // 0' < $payload)
mem_increase_mb=$(jq -r '.source.mem_increase_mb // 0' < $payload)

jq -r '.version // ""' < $payload >> $out
prev_pod=$(jq -r '.version.pod // ""' < $payload)
prev_ns=$(jq -r '.version.namespace // ""' < $payload)
prev_container=$(jq -r '.version.container // ""' < $payload)
prev_timestamp=$(jq -r '.version.date // ""' < $payload)
prev_mem=$(jq -r '.version.mem // ""' < $payload)

top_flags="--containers --no-headers"
if [ -n "$labels" ]; then
  top_flags="$top_flags -l $labels"
fi

kubectl_flags="--username $username --password $password --server $server --certificate-authority $CA_PATH"
if [ -n "$namespace" ]; then
  kubectl_flags="$kubectl_flags -n $namespace"
fi

now="$(date -u +"%FT%H%MZ")"

kubectl $kubectl_flags top pod $top_flags | \
  awk -v container_name="$container_name" '$2==container_name {print $0}' | \
    while read pod container cpu mem; do
      echo "$pod: cpu=$cpu mem=$mem"

      if [[ ! (-z $mem_threshold_mb || ${mem%"Mi"} -ge $mem_threshold_mb) ]]; then
        echo "  does not meet mem threshold (${mem_threshold_mb}Mi)"
        continue
      fi

      if [[ ! (-z $cpu_threshold_m || ${cpu%"m"} -ge $cpu_threshold_m) ]]; then
        echo "  does not meet cpu threshold (${cpu_threshold_m}m)"
        continue
      fi

      if [[ ($pod = $prev_pod) && ($container = $prev_container) && ($namespace = $prev_ns) ]]; then
        diff_seconds=$(dateutils.ddiff -i "%FT%H%MZ" "$prev_timestamp" "$now")
        if [[ ! (${diff_seconds%"s"} -ge $time_between_s) ]]; then
          echo "  has not been long enough since last emission"
          echo "    prev emission:      $prev_timestamp"
          echo "    cur time between:   $diff_seconds"
          echo "    req'd time between: ${time_between_s}s"
          continue
        fi

        diff_mb=$(expr ${mem%"Mi"} - ${prev_mem%"Mi"})
        if [[ ! ($diff_mb -ge $mem_increase_mb) ]]; then
          echo "  memory has not increased enough since last emission"
          echo "    prev emission:      $prev_mem"
          echo "    cur memory delta:   ${diff_mb}Mi"
          echo "    req'd memory delta: ${mem_increase_mb}Mi"
          continue
        fi
      fi

      echo "  meets all requirements"

      jq -n '{ "namespace": $namespace, "pod": $pod, "container": $container, "mem": $mem, "cpu": $cpu, "date": $date }' \
        --arg namespace "$namespace" \
        --arg pod "$pod" \
        --arg container "$container" \
        --arg mem "$mem" \
        --arg cpu "$cpu" \
        --arg date "$now" >> $out
    done

cat $out | jq -s '.' >&3
